AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: An Amazon API Gateway REST API that integrates with an Amazon DynamoDB table that contains user data.

Parameters:
  AppName:
    Type: String
    Default: dynamo-api-CRUD
    Description: Name of application.
  StageName:
    Type: String
    Default: v1
    Description: Name of API stage.


Resources:
  MyUserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: user
      AttributeDefinitions:
        - AttributeName: userName_pk0
          AttributeType: S
      KeySchema:
        - AttributeName: userName_pk0
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      GlobalSecondaryIndexes:
        - IndexName: userName-Index
          KeySchema:
            - AttributeName: userName_pk0
              KeyType: HASH
          Projection:
            ProjectionType: INCLUDE
            NonKeyAttributes:
              - lastName
              - firstName
              - postalCode
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
  APIGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: APIGatewayDynamoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                Resource: !Sub
                  - '${varTableArn}*'
                  - varTableArn: !GetAtt MyUserTable.Arn

  Api:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${AppName}'
      ApiKeySourceType: HEADER
  UserResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'user'


  UserMethodPost:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref UserResource
      HttpMethod: POST
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/PutItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          application/json: "{\n    \"TableName\":\"user\",\n    \"Item\":\n    {\n        \"id\":{\"S\":\"$context.requestId\"},\n        \"userName_pk0\":{\"S\":\"$input.path('$.userName')\"},\n        \"postalCode\":{\"N\":\"$input.path('$.postalCode')\"},\n        \"firstName\":{\"S\":\"$input.path('$.firstName')\"},\n        \"lastName\":{\"S\":\"$input.path('$.lastName')\"}\n    }\n}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: '200'

  UserNameResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref Api
      ParentId: !Ref UserResource
      PathPart: '{userName}'

  UserMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref UserNameResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userName: true
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.userName: method.request.path.userName
        RequestTemplates:
          application/json: "{\n    \"TableName\":\"user\",\n    \"IndexName\":\"userName-Index\",\n    \"KeyConditionExpression\":\"userName_pk0=:v1\",\n    \"ExpressionAttributeValues\":\n    {\n        \":v1\":\n        {\"S\":\"$util.urlDecode($input.params('userName'))\"}\n    }\n}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: "#set($inputRoot = $input.path('$'))\n{\n\t\"user\": [\n\t\t#foreach($field in $inputRoot.Items) {\n\t\t\t\"userName\": \"$field.userName_pk0.S\",\n\t\t\t\"firstName\": \"$field.firstName.S\",\n\t\t\t\"lastName\": \"$field.lastName.S\",\n\t\t\t\"postalCode\": \"$field.postalCode.N\"\n\t\t}#if($foreach.hasNext),#end\n\t\t#end\n\t]\n}"
      MethodResponses:
        - StatusCode: '200'


  UserMethodUpdate:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref UserNameResource
      HttpMethod: PUT
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userName: true
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/UpdateItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.userName: method.request.path.userName
        RequestTemplates:
          application/json: "\n{\n    \"TableName\": \"user\",\n    \"Key\": {\n        \"userName_pk0\": {\n            \"S\": \"$util.urlDecode($input.params('userName'))\"\n        }\n    },\n    \"UpdateExpression\": \"set postalCode = :pc, firstName = :fn, lastName = :ln\",\n    \"ExpressionAttributeValues\": {\n        \":pc\": {\"N\": \"$input.path('$.postalCode')\"},\n        \":fn\": {\"S\": \"$input.path('$.firstName')\"},\n        \":ln\": {\"S\": \"$input.path('$.lastName')\"}\n    },\n    \"ReturnValues\": \"ALL_NEW\"\n}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: '200'

  UserMethodDelete:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref Api
      ResourceId: !Ref UserNameResource
      HttpMethod: DELETE
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.userName: true
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/DeleteItem'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestParameters:
          integration.request.path.userName: method.request.path.userName
        RequestTemplates:
          application/json: "{\n    \"TableName\": \"user\",\n    \"Key\": {\n        \"userName_pk0\": {\n            \"S\": \"$util.urlDecode($input.params('userName'))\"\n        }\n    }\n}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseTemplates:
              application/json: "{}"
      MethodResponses:
        - StatusCode: '200'


  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - UserMethodGet
    Properties:
      RestApiId: !Ref Api
      StageName: !Sub '${StageName}'
  ApiKey:
    Type: 'AWS::ApiGateway::ApiKey'
    DependsOn:
      - ApiDeployment
    Properties:
      Enabled: true
      Name: !Sub '${AppName}-apikey'
      StageKeys:
        - RestApiId: !Ref Api
          StageName: !Sub '${StageName}'
  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - ApiDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref Api
          Stage: !Sub '${StageName}'
      Throttle:
        RateLimit: 500
        BurstLimit: 1000
      UsagePlanName: !Sub '${AppName}-usage-plan'
      Quota:
        Limit: 10000
        Period: MONTH
  ApiUsagePlanKey:
    Type: 'AWS::ApiGateway::UsagePlanKey'
    Properties:
      KeyType: API_KEY
      KeyId: !Ref ApiKey
      UsagePlanId: !Ref ApiUsagePlan

Outputs:
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${StageName}'
      - ApiId: !Ref Api
  ApiKeyId:
    Description: API Key Id
    Value: !Ref ApiKey